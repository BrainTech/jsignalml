<?xml version="1.0"?>
<!DOCTYPE signalml SYSTEM "SignalML_2_0.dtd">
<signalml>
	<header>
		<text_info>PE-EASYS</text_info>
	</header>

	<file type='binary' id='main'><!-- extension='*.d' -->
		<param id='mapping' type='int'>
			<arg type='int' name='sample_number' />
			<arg type='int' name='channel_number' />
			<expr>(number_of_channels * sample_number + channel_number) *
				data_cell_size + data_offset
			</expr>
		</param>

							<param id='channel_name' type='str'>
								<expr>'chnam000'</expr>
							</param>
							<param id='channel_type_name' type='str'>
								<expr>'chtyp000'</expr>
							</param>
							
		<param id='signature'>
			<format>'|S15'</format>
			<offset>0</offset>
		</param>
		<param id='magic'>
			<expr>signature[:3]</expr>
		</param>
		<assert id='magic_ok'>
			<expr>magic == "EAS"</expr>
		</assert>

		<param id='file_type'>
			<!-- D or R -->
			<format>'|S1'</format>
			<offset>15</offset>
		</param>
		<assert id='file_type_ok'>
			<expr>file_type == "D"</expr>
		</assert>

		<param id='number_of_channels'>
			<format>'|u1'</format>
			<offset>16</offset>
		</param>

		<param id='sample_unit' type='float'>
			<expr>1</expr>
		</param>

		<param id='number_of_auxiliary_channels'>
			<format>'|u1'</format>
			<offset>17</offset>
		</param>

		<param id='sampling_frequency' type='float' units='Hz'>
			<format>'&lt;u2'</format>
			<offset>18</offset>
		</param>

		<param id='number_of_samples'>
			<format>'&lt;i4'</format>
			<offset>20</offset>
		</param>

		<param id='data_validation_field'>
			<!-- flags ... -->
			<format>'|i1'</format>
			<offset>24</offset>
		</param>

		<param id='data_cell_size'>
			<expr>2**(data_validation_field &amp; 3 - 1)</expr>
		</param>
		<assert id='data_cell_size_ok'>
			<expr>(file_type == 'D' and data_cell_size == 2)
				or (file_type == 'R' and data_cell_size == 4)
			</expr>
		</assert>

		<!-- more 'flags' should follow -->

		<param id='calibration_gain' type='float' units='Î¼V'>
			<expr>1/_calibration_unit</expr>
		</param>
		<param id='_calibration_unit'>
			<format>'|u1'</format>
			<offset>25</offset>
		</param>

		<param id='calibration_offset'>
			<format>'&lt;i2'</format>
			<offset>26</offset>
		</param>

		<param id='data_org'>
			<!-- data offset -->
			<format>'&lt;u2'</format>
			<offset>28</offset>
		</param>
		<param id='data_offset'>
			<expr>data_org * 16</expr>
		</param>

		<param id='xhdr_org' type='int'>
			<!-- data offset -->
			<format>'&lt;u2'</format>
			<offset>30</offset>
		</param>
		<param id='extended_header_offset'>
			<expr>xhdr_org * 16</expr>
		</param>

		<param id='record_name_map'>
			<expr>
				{'AU': 'Authentication_key',
				'FS': 'Frequency_of_sampling',
				'ID': 'Patient_ID_number_or_PIC',
				'RB': 'RBLock_structure_definition',
				'TE': 'Text_record',
				'TI': 'Time_info', <!-- ctype structure -->
				'TT': 'Tag_table',
				'TX': 'Text_record_extension',
				}
			</expr>
		</param>

		<channelset id='data'>
			<for-each id='extended_header' var='indexHdr' type='int'
				sequence='xhdr_org ? range(20) : []'>
				<if id='if_ext_hdr' test='indexHdr==0 or extended_header[indexHdr-1].if_ext_hdr.record_size'>
					<param id='offset' type='int'>
						<expr>indexHdr == 0 ? extended_header_offset :
							extended_header[indexHdr-1].if_ext_hdr.offset +
							extended_header[indexHdr-1].if_ext_hdr.record_size + 4</expr>
					</param>
					<param id='record_mnemonic' type='str'>
						<format>'|S2'</format>
						<offset>offset</offset>
					</param>
					<param id='record_size' type='int'>
						<format>'&lt;u2'</format>
						<offset>offset + 2</offset>
					</param>
					<if id='if_record_channel_names' test='record_mnemonic == "CN"'>
						<for-each id='channels' var='index' sequence='range(number_of_channels)'
							type='int'>
							<channel mapping='mapping' format='"&lt;i2"' length='number_of_samples'
								fast='1' />
							<param id='channel_name_ASCIIZ' type='str'>
								<format>'|S4'</format>
								<offset>offset + 4 + index * 4</offset>
							</param>
							<param id='channel_name' type='str'>
								<expr>trim(channel_name_ASCIIZ)</expr>
							</param>
							<!-- param id='channel_type_name' type='str'>
								<expr>'EEG'</expr>
							</param -->
							<param id='mapping' type='int'>
								<arg type='int' name='sample' />
								<expr>data_offset + (sample * number_of_channels + index) *
									data_cell_size</expr>
							</param>
						</for-each>
					</if>
					<else>
						<param id='record_size' type='int'>
							<expr>0</expr>
						</param>
					</else>
				</if>
			</for-each>
		</channelset>
		
	</file>
</signalml>
