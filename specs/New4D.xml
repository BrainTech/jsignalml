<?xml version="1.0"?>
<!DOCTYPE signalml SYSTEM "SignalML_2_0.dtd">
<signalml>
	<header>
		<text_info>SignalML definition for new 4D format</text_info>
	</header>
	<file id='main' type='text'>
		<param id='number_of_blocks' type='int'>
			<expr>8</expr>
		</param>
		<param id='data_filename' type='str'>
			<expr>fetch(get_filename(main), "([a-zA-Z0-9_,.;]+.)hdr", 1) + "data"</expr>
		</param>
		<param id='acquisition_mode' type='str'>
			<line>-1</line>
			<pattern>"[ ]*Acquisition[ _]*[Mm]{1}ode[ ]*:[ ]*([A-Za-z]*)"</pattern>
			<group>1</group>
		</param>
		<param id='file_type' type='str'>
			<line>-1</line>
			<pattern>"[ ]*File[ _]*[Tt]{1}ype[ ]*:[ ]*\'([A-Za-z]*)\'"</pattern>
			<group>1</group>
		</param>
		<param id='channel_name' type='str'>
			<expr>'chNamInit0'</expr>
		</param>
		<param id='channel_type_name' type='str'>
			<expr>'chTypInit0'</expr>
		</param>
		<param id='sample_period' type='float' units='s'>
			<line>-1</line>
			<pattern>"[ ]*Sample[ _]*[Pp]{1}eriod[ ]*:[ ]*([0-9]+[.0-9e+]*)"</pattern>
			<group>1</group>
		</param>
		<param id='period_hex_float' type='int' units='s'>
			<line>-1</line>
			<pattern>"[ ]*Period[ _]*[Hh]{1}ex[ _]*[Ff]{1}loat[ ]*:[ ]*(0x[0-9A-Fa-f]+)"</pattern>
			<group>1</group>
		</param>
		<param id='sampling_frequency' type='float' units='Hz'>
			<line>-1</line>
			<pattern>"[ ]*Sample[ _]*[Ff]{1}requency[ ]*:[ ]*([0-9]+[.0-9e+]*)"</pattern>
			<group>1</group>
		</param>
		<param id='total_epochs' type='int'>
			<line>-1</line>
			<pattern>"[ ]*Total[ _]*[Ee]{1}pochs[ ]*:[ ]*([0-9]*)"</pattern>
			<group>1</group>
		</param>
		<param id='data_format' type='str'>
			<line>-1</line>
			<pattern>"[ ]*Data[ _]*[Ff]{1}ormat[ ]*:[ ]*([A-Za-z,]*)"</pattern>
			<group>1</group>
		</param>
		<param id='total_number_of_channels' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+channels[ ]*$"</pattern>
			<group>1</group>
		</param>
		<param id='MEG_number_of_channels' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+MEG[ ]*channels[,]{1}[ ]*group[ ]*([0-9]*)"</pattern>
			<group>1</group>
		</param>
		<param id='MEG_channel_group' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+MEG[ ]*channels[,]{1}[ ]*group[ ]*([0-9]*)"</pattern>
			<group>2</group>
		</param>
		<param id='REFERENCE_number_of_channels' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+REFERENCE[ ]*channels[,]{1}[ ]*group[ ]*([0-9]*)"</pattern>
			<group>1</group>
		</param>
		<param id='REFERENCE_channel_group' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+REFERENCE[ ]*channels[,]{1}[ ]*group[ ]*([0-9]*)"</pattern>
			<group>2</group>
		</param>
		<param id='EEG_number_of_channels' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+EEG[ ]*channels[,]{1}[ ]*group[ ]*([0-9]*)"</pattern>
			<group>1</group>
		</param>
		<param id='EEG_channel_group' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+EEG[ ]*channels[,]{1}[ ]*group[ ]*([0-9]*)"</pattern>
			<group>2</group>
		</param>
		<param id='TRIGGER_number_of_channels' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+TRIGGER[ ]*channels[,]{1}[ ]*group[ ]*([0-9]*)"</pattern>
			<group>1</group>
		</param>
		<param id='TRIGGER_channel_group' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+TRIGGER[ ]*channels[,]{1}[ ]*group[ ]*([0-9]*)"</pattern>
			<group>2</group>
		</param>
		<param id='UTILITY_number_of_channels' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+UTILITY[ ]*channels[,]{1}[ ]*group[ ]*([0-9]*)"</pattern>
			<group>1</group>
		</param>
		<param id='UTILITY_channel_group' type='int'>
			<line>-1</line>
			<pattern>"[ ]*([0-9]*)[ ]+UTILITY[ ]*channels[,]{1}[ ]*group[ ]*([0-9]*)"</pattern>
			<group>2</group>
		</param>
		<param id='line_pattern_for_channel_sensitivities' type='str'>
			<expr>"^[ ]*([A-Za-z0-9]+)[ ]+([0-9]+)[ ]+([0-9e+-.]+)[ ]+([a-zA-Z]+)[ ]*$"</expr>
		</param>
		<param id='line_number_with_channel_sensitivities' type='int'>
			<expr>get_line_for_pattern(main, line_pattern_for_channel_sensitivities, 0)</expr>
		</param>
		<param id='longest_epoch_nr' type='int'>
			<line>-1</line>
			<pattern>"[ ]*Epoch[ _]*([0-9]*)[ ]*:[ ]*([0-9]*)[ ]+slices[,]{1}[ ]*([0-9]+[.]{1}[0-9]*)"</pattern>
			<group>1</group>
		</param>
		<param id='number_of_samples' type='int'>
			<line>-1</line>
			<pattern>"[ ]*Epoch[ _]*([0-9]*)[ ]*:[ ]*([0-9]*)[ ]+slices[,]{1}[ ]*([0-9]+[.]{1}[0-9]*)"</pattern>
			<group>2</group>
		</param>
		<param id='longest_epoch_duration' type='float' units='s'>
			<line>-1</line>
			<pattern>"[ ]*Epoch[ _]*([0-9]*)[ ]*:[ ]*([0-9]*)[ ]+slices[,]{1}[ ]*([0-9]+[.]{1}[0-9]*)"</pattern>
			<group>3</group>
		</param>
		<param id='msi_format' type='str'>
			<expr>data_format</expr>
		</param>
		<if id='size' test='msi_format == "bigendian,short"'>
			<param id='sample_size_1' type='int'>
				<expr>2</expr>
			</param>
			<else-if test='msi_format == "bigendian,float"'>
				<param id='sample_size_1' type='int'>
					<expr>4</expr>
				</param>
				<else-if test='msi_format == "ASCII"'>
					<param id='sample_size_1' type='int'>
						<expr>1</expr>
					</param>
					<else>
						<param id='sample_size_1' type='int'>
							<expr>0</expr>
						</param>
					</else>
				</else-if>
			</else-if>
		</if>
		<if id='format' test='msi_format == "bigendian,short"'>
			<param id='sample_format_1' type='str'>
				<expr>"&gt;i2"</expr>
			</param>
			<else-if test='msi_format == "bigendian,float"'>
				<param id='sample_format_1' type='str'>
					<expr>"&gt;f4"</expr>
				</param>
				<else-if test='msi_format == "ASCII"'>
					<param id='sample_format_1' type='str'>
						<expr>"|S0"</expr>
					</param>
					<else>
						<param id='sample_format_1' type='str'>
							<expr>"|S0"</expr>
						</param>
					</else>
				</else-if>
			</else-if>
		</if>
		<param id='sample_size' type='int'>
			<expr>size.sample_size_1</expr>
		</param>
		<param id='sample_format' type='str'>
			<expr>str(format.sample_format_1)</expr>
		</param>
		<param id='sample_unit' type='float'>
			<expr>1</expr>
		</param>

		<file id='data_file' type='text' filename='data_filename' />

		<channelset id='data_test'>
			<for-each id='channels' var='line_nr' sequence='range(total_number_of_channels)' type='int'>
				<param id='line_nr_channel_sensitivities' type='int'>
					<expr>line_number_with_channel_sensitivities + line_nr</expr>
				</param>
				<param id='channel_group' type='int'>
					<line type='int'>line_nr_channel_sensitivities</line>
					<pattern>line_pattern_for_channel_sensitivities</pattern>
					<group>2</group>
				</param>
				<if test='channel_group == MEG_channel_group'>
					<param id='channel_name' type='str'>
						<line type='int'>line_nr_channel_sensitivities</line>
						<pattern>line_pattern_for_channel_sensitivities</pattern>
						<group>1</group>
					</param>
					<param id='channel_type_name' type='str'>
						<expr>'MEG'</expr>
					</param>
					<param id='channel_sensitivity' type='float'>
						<line type='int'>line_nr_channel_sensitivities</line>
						<pattern>line_pattern_for_channel_sensitivities</pattern>
						<group>3</group>
					</param>
					<param id='channel_sensitivity_unit' type='str'>
						<line type='int'>line_nr_channel_sensitivities</line>
						<pattern>line_pattern_for_channel_sensitivities</pattern>
						<group>4</group>
					</param>
					<param id='calibration_gain' type='float' units='str(channel_sensitivity_unit)'>
						<expr>channel_sensitivity</expr>
					</param>
					<channel id='channel' mapping='mapping' format='sample_format'
								length='number_of_samples' data='data_file' fast='1'>
						<param id='mapping' type='int'>
							<arg type='int' name='sample' />
							<expr>(sample * total_number_of_channels + line_nr) * sample_size</expr>
						</param>
					</channel>
				</if>
			</for-each>
		</channelset>
	</file>
</signalml>
